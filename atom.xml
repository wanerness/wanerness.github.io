<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-19T08:41:29.634Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 文字上移-原因及解决方案</title>
    <link href="http://yoursite.com/2019/09/22/Android-%E6%96%87%E5%AD%97%E4%B8%8A%E7%A7%BB/"/>
    <id>http://yoursite.com/2019/09/22/Android-文字上移/</id>
    <published>2019-09-22T06:18:39.000Z</published>
    <updated>2019-10-19T08:41:29.634Z</updated>
    
    <content type="html"><![CDATA[<p>android 中文字会向偏移，（如按钮文字，加了删除线的文字，偏移效果明显，iphone中正常居中）</p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><h4 id="一-从字体谈起"><a href="#一-从字体谈起" class="headerlink" title="一 从字体谈起"></a>一 从字体谈起</h4><p><a href="https://zhuanlan.zhihu.com/p/25808995" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25808995</a><br><a href="http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align" target="_blank" rel="noopener">http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align</a></p><h6 id="font-size：100px代表什么意思，实际的字体是多大？"><a href="#font-size：100px代表什么意思，实际的字体是多大？" class="headerlink" title="font-size：100px代表什么意思，实际的字体是多大？"></a>font-size：100px代表什么意思，实际的字体是多大？</h6><p>这个p标签里包含了三个span标签，每个span应用了一个不同的字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     p  &#123; font-size: 100px &#125;</span><br><span class="line">     .a &#123; font-family: Helvetica &#125;</span><br><span class="line">     .b &#123; font-family: Gruppo    &#125;</span><br><span class="line">     .c &#123; font-family: Catamaran &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;span class=&quot;a&quot;&gt;Ba&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;b&quot;&gt;Ba&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;c&quot;&gt;Ba&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>而实际上，三个span大小并不是100px</p><p><img src="https://i.loli.net/2019/10/19/rNUqaYKiBRouysG.png" alt="font1.png"></p><p> 为什么会这样呢，这涉及到字体的原理：</p><ul><li>一款字体会定义一个 em-square，它是用来盛放字符的金属容器。这个 em-square 一般被设定为宽高均为 1000 相对单位，不过也可以是 1024、2048 相对单位。</li></ul><p><img src="https://i.loli.net/2019/10/19/VUFtkcWSH4ZG32n.jpg" alt="font3.jpg"></p><ul><li>字体的度量相对于这个单位设置，包括 ascender、descender、capital height、x-height 等，字体的实际大小是可以超出em-square的尺寸的</li></ul><p><img src="https://i.loli.net/2019/10/19/yufphkaieqT61bZ.jpg" alt="font2.jpg"></p><ul><li>font-size: 100px是相对于em-square尺寸的比例。</li></ul><p>字体实际高度=(fontSize/em-square)*实际字体实际单位</p><p>以Catamaran字体为例，它的em-square为1000，而实际单位为1640（ascender:1100+descender:540）,所以当我设置其font-size为100px时，根据公式，实际显示的高度为：<br>(100/1000)*1640 = 164px</p><p>==这个计算出的实际字体高度（164px）叫做元素的content-area==</p><h4 id="二-line-box"><a href="#二-line-box" class="headerlink" title="二 line-box"></a>二 line-box</h4><p>将p元素修改下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    Good design will be better.</span><br><span class="line">    &lt;span class=&quot;a&quot;&gt;Ba&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;b&quot;&gt;Ba&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;c&quot;&gt;Ba&lt;/span&gt;</span><br><span class="line">    We get to make a consequence.</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/10/19/WOr1h3fHe2cVSzZ.png" alt="line-box1.png"></p><p>有可能在浏览器上渲染出三行(调节window宽度时)，每一行叫做一个line-box，这里看到每个line-box的高度不用，这是因为==line-box的高度是根据每个子元素的高度计算出来的==</p><p>由于第二行中使用了Catamaran字体，导致该span的高度增加，所以这样的高度大于另两行（这里每一行都是inline元素）</p><p>==事实上，line-box的高度为该行子元素的最低点到最高点的距离==</p><h4 id="三-Line-height"><a href="#三-Line-height" class="headerlink" title="三 Line-height"></a>三 Line-height</h4><p><strong>line-box的高度是根据每个子元素的高度计算出来的，而不是子元素的content-area 的高度</strong></p><p>一个内联元素的高度可以理解有两种：</p><ul><li>content-area ：由字体度量定义</li><li>virtual-area (作者自己发明的)：即实际区域的高度，由line-height决定，用于计算line-box的高度</li></ul><p><img src="https://i.loli.net/2019/10/19/RTbFPnsziyGg7QV.jpg" alt="line-box2.jpg"></p><p>这么看，不应将line-height理解成两行baseline之间的距离，而是一个内联元素实际显示区域的高度</p><h5 id="line-height-normal-和-line-height-1"><a href="#line-height-normal-和-line-height-1" class="headerlink" title="line-height:normal 和 line-height:1"></a>line-height:normal 和 line-height:1</h5><h6 id="1-line-height-normal-line-height不指定，而是根据字体规格进行计算"><a href="#1-line-height-normal-line-height不指定，而是根据字体规格进行计算" class="headerlink" title="1.line-height:normal  line-height不指定，而是根据字体规格进行计算"></a>1.line-height:normal  line-height不指定，而是根据字体规格进行计算</h6><ul><li>常规的 Ascent/Descent：ascender 是 770，descender 是 230，用于渲染字符。</li><li>规格 Ascent/Descent：ascender 是 1100，descender 是 540。用于计算 content-area 的高度</li><li>规格 Line Gap：用于计算 line-height: normal</li></ul><p>以Arial字体为例，它的 em-square 是 2048，ascender 是 1854，descender 是 434，line gap 是 67。那么当 font-size: 100px 时</p><p>content-area ：(100/2048)*(1854+434)  约112px</p><p>line-height: normal (100/2048)*(1854+434+67)  约115px</p><p><em>当Line Gap为0时，line-height:normal的line-height与content-area相同</em></p><h6 id="2-line-height-1"><a href="#2-line-height-1" class="headerlink" title="2.line-height:1"></a>2.line-height:1</h6><p>当line-height:数字  时，表示font-size的倍数，所以line-height:1表示line-height为100px，而此时content-area为164，就会导致行间字体重叠</p><p><img src="https://i.loli.net/2019/10/19/tsoJAnmg2YxqEZb.png" alt="line-height1.png"></p><h4 id="四-vertical-align"><a href="#四-vertical-align" class="headerlink" title="四 vertical-align"></a>四 vertical-align</h4><p>vertical-align也是计算 line-box 高度的重要因素之一,默认值是baseline，而baseline是由字体度量里的 ascender 和 descender 决定的（二者很少1：1比例），<strong>也就是说，不同字体的baseline都不一样</strong></p><p>现在来看这样一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    font-family: Catamaran;</span><br><span class="line">    font-size: 100px;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;span&gt;Ba&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;Ba&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>对于p中的每一个内联元素span，继承了font-family，font-size和line-height,baseline等高，所以line-box的高度就是每个span的line-height</p><p><img src="https://i.loli.net/2019/10/19/Iox4QDPUk75Trmn.png" alt="vertical-align1.png"></p><p>然而，当缩小了第二个span的字体之后，发现line-box的高度反而变高了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">span:last-child &#123;</span><br><span class="line">    font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/19/tBXcRmQjsDyVh1o.png" alt="vertical-align2.png"></p><p>此时虽然二span的line-height都没变，但第二个的content-area的高度变化了，导致基线位置变化，二者以基线对其时，便发生了错位</p><p><strong>这说明了line-box的高度是从所有子元素的最低点到最高点</strong></p><h4 id="五-strut"><a href="#五-strut" class="headerlink" title="五 strut"></a>五 strut</h4><p>了解了上边的知识后，来看这个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     p &#123;</span><br><span class="line">       line-height: 200px;</span><br><span class="line">     &#125;</span><br><span class="line">     span &#123;</span><br><span class="line">       font-family: Catamaran;</span><br><span class="line">       font-size: 100px;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;span&gt;Ba&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>此时的line-box高度是200吗？不是！<br>由于p标签有自己的font-family ,默认是serif，p 的 baseline 和 span 的 baseline 位置不一样，因此最终的 line-box 比我们预想的要高一些。出现这种问题是因为浏览器认为每个 line-box 的起始位置都有一个宽度为 0 的字符（CSS 文档将其称为 strut），并将其纳入 line-box 的高度的计算中。</p><p><img src="https://i.loli.net/2019/10/19/o3kfWR5F9tlTUbs.png" alt="strut.png"></p><p> 用 baseline 来对齐令人费解，如果我们用 vertical-align: middle 会不会好一点呢？读 CSS 文档你会发现，middle 的意思是「用父元素 baseline 高度加上父元素中 x-height 的一半的高度来对齐当前元素的垂直方向的中点」。baseline 所处的高度跟字体有关，x-height 的高度也跟字体有关，所以 middle 对齐也不靠谱。更糟糕的是，一般来说，middle 根本就不是居中对齐！内联元素的对齐受太多因素影响，因此不可能用 CSS 实现。</p><p> 顺便一说，vertical-align 的其他 4 个值有可能有点用：</p><ul><li>vertical-align: top / bottom，表示与 line-box 的顶部或底部对齐</li><li>vertical-align: text-top / text-bottom，表示与 content-area 的顶部或底部对齐</li></ul><h4 id="六-回到安卓"><a href="#六-回到安卓" class="headerlink" title="六 回到安卓"></a>六 回到安卓</h4><p>为什么安卓会出现文字偏上的情况，就是由于字体导致的</p><p>览器是通过 fonts.xml 查找字体信息的。然而原生Android中该文件并没有定义中文字体的 font-family，导致匹配上的始终不是中文字体，浏览器没找到中文字体，只匹配到了默认英文字体，当逐字符渲染到英文字体没有的字符时才 fallback 到中文字体。相当于把 font-family 设成了 [英文字体], [中文字体]</p><p>这样，如果给定了line-height值,当渲染内联元素时，由于字体不同（结合上述strut），以基线对其时必然发生了偏差</p><p>而如果line-height为normal，则不会有这个问题，每个字体会以自己的字体规则计算line-height（见上述公式），并按照基线对齐</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>所以通过以上分析，可采取下列解决方案：</p><ol><li><p>针对 Android 7.0+ 设备：<html>上设置 lang 属性：<html lang="zh-cmn-Hans">，同时 font-family 不指定英文，如 font-family: sans-serif 。这个方法是利用了浏览器的字体 fallback 机制，让英文也使用中文字体来展示，blink 早期的内核在 fallback 机制上存在问题，Android 7.0+ 才能 ok，早期的内核下会导致英文 fallback 到 Noto Sans Myanmar，这个字体非常丑。</html></html></p></li><li><p>除了这个方案，另一个就是，在需要垂直居中的场合，不设置 line-height，保持其默认值 normal，而完全用 padding 将容器撑起来。(或者flex布局，table-cell布局)这个方案的缺点在于，不同字体的 line-height: normal 的值不尽相同，会导致容器实际高度与设计稿有出入。毕竟移动端 web 设计稿基本都是以 iOS 为基准设计的，而 Android 机型鱼龙混杂，涉及字体的视觉还原本身难以进行。实测发现，iOS 的 Pingfang 与 Android 7.0+ 的 Noto Sans CJK 字体在默认 line-height 值下每个 font-size 所对应实际文字高度相差不超过 1px，个人认为是完全可以接受的，也可以与设计师一起评估。</p></li></ol><h4 id="references"><a href="#references" class="headerlink" title="references:"></a>references:</h4><p><a href="https://www.zhihu.com/question/39516424" target="_blank" rel="noopener">https://www.zhihu.com/question/39516424</a></p><p><a href="https://rprns.me/2018/07/27/%E5%85%B3%E4%BA%8E%20Android%20%E4%B8%8B%20line-height%20%E6%96%87%E5%AD%97%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%81%8F%E7%A7%BB%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">https://rprns.me/2018/07/27/%E5%85%B3%E4%BA%8E%20Android%20%E4%B8%8B%20line-height%20%E6%96%87%E5%AD%97%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%81%8F%E7%A7%BB%E7%9A%84%E6%80%9D%E8%80%83/</a></p><p><a href="https://zhuanlan.zhihu.com/p/25808995" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25808995</a></p><p><a href="http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align" target="_blank" rel="noopener">http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align</a></p><!-- 解决方案：将字体扩大一倍，然后用transform：scale(0.5)在缩小一倍<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.raw-price &#123;</span><br><span class="line">     font-size: 18px;  //目标size为9px， 这里放大一倍</span><br><span class="line">     transform: scale(.5); //在使用transform缩小</span><br><span class="line">     position: absolute; </span><br><span class="line">     left: -15px; //当使用了transform时，位置也会缩小，定位需要重写</span><br><span class="line">     top: 5px; </span><br><span class="line">     line-height: 12px; </span><br><span class="line">     color: rgb(120, 130, 149); </span><br><span class="line">     opacity: 0.47; text-decoration: line-through; &#125;</span><br></pre></td></tr></table></figure><p>注意：需要调节位置，scale缩放后会导致错位</p><p><a href="https://github.com/o2team/H5Skills/issues/4">https://github.com/o2team/H5Skills/issues/4</a> –&gt;</p>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;android 中文字会向偏移，（如按钮文字，加了删除线的文字，偏移效果明显，iphone中正常居中）&lt;/p&gt;
&lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;h4 id=&quot;一-从字体谈
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fork 远程库并更新</title>
    <link href="http://yoursite.com/2019/08/17/fork-%E8%BF%9C%E7%A8%8B%E5%BA%93%E5%B9%B6%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2019/08/17/fork-远程库并更新/</id>
    <published>2019-08-17T07:53:35.000Z</published>
    <updated>2019-08-17T08:26:58.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-fork"><a href="#一-fork" class="headerlink" title="一 fork"></a>一 fork</h1><p>fork 远程库，就是将原始远程库拷贝一个副本到自己的远端库中，之后可以通过克隆到本地，对项目进行修改提交（提交到自己的远程库中），最后通过发送merge request请求并入到原始库中，可通过这种模式开发开源项目，或公司内协同工作</p><h1 id="二-fork-库并同步"><a href="#二-fork-库并同步" class="headerlink" title="二 fork 库并同步"></a>二 fork 库并同步</h1><p>原始库：A</p><p>fork库 ：B</p><h3 id="1-gitlab-github上fork原始库"><a href="#1-gitlab-github上fork原始库" class="headerlink" title="1 gitlab/github上fork原始库"></a>1 gitlab/github上fork原始库</h3><p>点击进入原始库A的gitlab/github仓库，点击fork，fork到B库中</p><h3 id="2-克隆B库到本地"><a href="#2-克隆B库到本地" class="headerlink" title="2 克隆B库到本地"></a>2 克隆B库到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd b</span><br><span class="line"></span><br><span class="line">git clone b库地址</span><br></pre></td></tr></table></figure><h3 id="3-添加B本地库的上游库（原始库）追踪"><a href="#3-添加B本地库的上游库（原始库）追踪" class="headerlink" title="3 添加B本地库的上游库（原始库）追踪"></a>3 添加B本地库的上游库（原始库）追踪</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream A库地址</span><br></pre></td></tr></table></figure><p>添加后可以用 git remote -v 查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> git remote -v</span><br><span class="line"></span><br><span class="line">originhttps://github.com/wanerness11/my-react-comp-npm.git (fetch)</span><br><span class="line">originhttps://github.com/wanerness11/my-react-comp-npm.git (push)</span><br><span class="line">upstreamhttps://github.com/wanerness/my-react-comp-npm.git (fetch)</span><br><span class="line">upstreamhttps://github.com/wanerness/my-react-comp-npm.git (push)</span><br></pre></td></tr></table></figure></p><h3 id="4-同步B库"><a href="#4-同步B库" class="headerlink" title="4 同步B库"></a>4 同步B库</h3><p>当A库发生更新后，使用如下方法同步B库</p><h4 id="1-fetch更新"><a href="#1-fetch更新" class="headerlink" title="1.fetch更新"></a>1.fetch更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure><p>fetch 后，A库的变化会拉取到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* [new branch]      dev        -&gt; upstream/dev //A库新增了dev分支，拉去到本地的 upstream/dev下</span><br><span class="line">* [new branch]      master     -&gt; upstream/master //A库修改了maste分支，拉取到本地的 upstream/master下</span><br></pre></td></tr></table></figure></p><h4 id="2-更新B库本地分支"><a href="#2-更新B库本地分支" class="headerlink" title="2.更新B库本地分支"></a>2.更新B库本地分支</h4><h5 id="1）更新B本地已存在的分支："><a href="#1）更新B本地已存在的分支：" class="headerlink" title="1）更新B本地已存在的分支："></a>1）更新B本地已存在的分支：</h5><p>切换到代更新分支上（如 master）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge upstream/master</span><br></pre></td></tr></table></figure><h5 id="2）同步B本地不存在的新分支："><a href="#2）同步B本地不存在的新分支：" class="headerlink" title="2）同步B本地不存在的新分支："></a>2）同步B本地不存在的新分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 新增分支名 upstream/新增分支名</span><br></pre></td></tr></table></figure><p>该操作拉取A库新增的分支到B库本地，</p><h3 id="5-push-B库本地内容到B库远端"><a href="#5-push-B库本地内容到B库远端" class="headerlink" title="5 push B库本地内容到B库远端"></a>5 push B库本地内容到B库远端</h3><p>以上几部的操作都是在B库的本地，必须通过push才能更新B库的远程库，对于B库本地新增的分支，可用以下命令push到远端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin 分支名</span><br></pre></td></tr></table></figure></p><h3 id="6-通过merge-request通知A库，申请将B库修改并入A库"><a href="#6-通过merge-request通知A库，申请将B库修改并入A库" class="headerlink" title="6 通过merge request通知A库，申请将B库修改并入A库"></a>6 通过merge request通知A库，申请将B库修改并入A库</h3><p>gitlab/github上发起merge request，选择好目标分支，发起请求即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-fork&quot;&gt;&lt;a href=&quot;#一-fork&quot; class=&quot;headerlink&quot; title=&quot;一 fork&quot;&gt;&lt;/a&gt;一 fork&lt;/h1&gt;&lt;p&gt;fork 远程库，就是将原始远程库拷贝一个副本到自己的远端库中，之后可以通过克隆到本地，对项目进行修改提交（
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>更换电脑，hexo迁移</title>
    <link href="http://yoursite.com/2019/07/08/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%EF%BC%8Chexo%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2019/07/08/更换电脑，hexo迁移/</id>
    <published>2019-07-08T10:20:26.000Z</published>
    <updated>2019-07-08T10:20:57.145Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/eternity1118_/article/details/71194395" target="_blank" rel="noopener">https://blog.csdn.net/eternity1118_/article/details/71194395</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/eternity1118_/article/details/71194395&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/eternity1118_
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>async await</title>
    <link href="http://yoursite.com/2019/06/18/async-await/"/>
    <id>http://yoursite.com/2019/06/18/async-await/</id>
    <published>2019-06-18T09:42:31.000Z</published>
    <updated>2019-06-18T09:46:10.420Z</updated>
    
    <content type="html"><![CDATA[<ol><li>await 要放入async函数内</li><li><p>await 后接一个promise对象，返回该对象的resolve值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> var p1=()=&gt;&#123;</span><br><span class="line">return new Promise((res,rej)=&gt;&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;res(&apos;resolve&apos;)&#125;,1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var res=await p1()</span><br><span class="line">console.log(res)   //resolve</span><br></pre></td></tr></table></figure></li><li><p>如果该promise对象被reject掉，需要使用try catch处理（await 只能接受resolve的值）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var p1=()=&gt;&#123;</span><br><span class="line">return new Promise((res,rej)=&gt;&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;rej(&apos;rejection&apos;)&#125;,3000)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">async function test()&#123;</span><br><span class="line">try&#123;</span><br><span class="line">var result=await p1()</span><br><span class="line">console.log(result)</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">console.log(&apos;error&apos;,e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure></li><li><p>async 函数返回值是一个promise，以内部return的值作为promise的resolve值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//这个async 函数的返回值是一个promise，以1为resolve值</span><br><span class="line"></span><br><span class="line">async function a()&#123;return 1&#125;</span><br><span class="line"></span><br><span class="line">a().then(res=&gt;&#123;console.log(res)&#125;) //res==1</span><br></pre></td></tr></table></figure></li><li><p>async await循环问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var urls=[u1,u2,u3]</span><br><span class="line">var result=[]</span><br><span class="line">async function fn()&#123;</span><br><span class="line">    for(var url of urls)&#123;</span><br><span class="line">        let res=await fetch(url)</span><br><span class="line">        let resJson=await res.json()</span><br><span class="line">        result.push(resJson)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>采用上述循环方法，每个异步过程依次执行（占用时间）</p><p>修正：将异步过程抽出到新的async函数中，使用await promise.all()平行获取到所有fetch的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var urls=[u1,u2,u3]</span><br><span class="line">var result=[]</span><br><span class="line">var promises</span><br><span class="line"></span><br><span class="line">async function fetchUrl(url)&#123;</span><br><span class="line">    let res=await fetch(url)</span><br><span class="line">    let resJson=await res.json()  </span><br><span class="line">    return resJson</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function fn()&#123;</span><br><span class="line">    for(var url of urls)&#123;</span><br><span class="line">        var promise =fetchUrl(url) //返回一个promise，以resJson解析</span><br><span class="line">        promises.push(promise)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   result=await Promise.all(promises)</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样所有的fetch都可以并发执行，最后由await Promise.all(promises) 接受每个fetch数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;await 要放入async函数内&lt;/li&gt;
&lt;li&gt;&lt;p&gt;await 后接一个promise对象，返回该对象的resolve值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6 箭头函数</title>
    <link href="http://yoursite.com/2019/06/17/ES6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/06/17/ES6-箭头函数/</id>
    <published>2019-06-17T08:26:21.000Z</published>
    <updated>2019-06-17T09:13:06.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-箭头函数中的this"><a href="#一-箭头函数中的this" class="headerlink" title="一 箭头函数中的this"></a>一 箭头函数中的this</h3><p>对于ES5中普通函数来说，this会绑定到函数<strong>执行时</strong>的上下文，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var o=&#123;</span><br><span class="line"> arr:[1,2,3]</span><br><span class="line"> loop:this.arr.forEach(function(v)&#123;</span><br><span class="line">console.log(this.arr)  // undefined,这里this为window，浏览器里forEach中的函数执行时，context为window</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//所以如果想让this指向对象o，需要进行绑定</span><br><span class="line">var o=&#123;</span><br><span class="line"> arr:[1,2,3],</span><br><span class="line"> loop:this.arr.forEach(function(v)&#123;</span><br><span class="line">console.log(this.arr)  // undefined,这里this为window，浏览器里forEach中的函数由window执行</span><br><span class="line">&#125;.bind(this))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在ES6的箭头函数中，this不会绑定到执行时的上下文，箭头函数的this为词法绑定，就是绑定到函数定义时的上下文，即this来自于包含箭头函数的代码块中的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var o=&#123;</span><br><span class="line"> arr:[1,2,3],</span><br><span class="line"> loop:this.arr.forEach((v)=&gt;&#123;</span><br><span class="line">console.log(this.arr)  // 这里this就是o</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-适用-不适用场景"><a href="#二-适用-不适用场景" class="headerlink" title="二 适用/不适用场景"></a>二 适用/不适用场景</h3><h4 id="适用"><a href="#适用" class="headerlink" title="适用"></a>适用</h4><p>this固定为定义时的context，不随执行变化</p><h4 id="不适用"><a href="#不适用" class="headerlink" title="不适用"></a>不适用</h4><p>1.直接用在对象方法上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;</span><br><span class="line">  name: 9,</span><br><span class="line">  fn: () =&gt; &#123;</span><br><span class="line">   console.log(this.name) //undefined，此时this==window</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.context随执行变化的场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var button = document.getElementById(&apos;press&apos;);</span><br><span class="line">button.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class="line">  this.classList.toggle(&apos;on&apos;); // 这里this无法指向button元素，而是指向了window</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-箭头函数中的this&quot;&gt;&lt;a href=&quot;#一-箭头函数中的this&quot; class=&quot;headerlink&quot; title=&quot;一 箭头函数中的this&quot;&gt;&lt;/a&gt;一 箭头函数中的this&lt;/h3&gt;&lt;p&gt;对于ES5中普通函数来说，this会绑定到函数&lt;strong
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建一个react组件并发布到npm</title>
    <link href="http://yoursite.com/2019/03/13/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAreact%E7%BB%84%E4%BB%B6%E5%B9%B6%E5%8F%91%E5%B8%83%E5%88%B0npm/"/>
    <id>http://yoursite.com/2019/03/13/创建一个react组件并发布到npm/</id>
    <published>2019-03-13T12:16:37.000Z</published>
    <updated>2019-03-13T12:39:56.630Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个react组件并发布到npm，就是编写react，使用webpack编译，发布的过程</p><h3 id="1-创建一个组件"><a href="#1-创建一个组件" class="headerlink" title="1. 创建一个组件"></a>1. 创建一个组件</h3><p>1.我们的项目名称为my-react-comp-npm，首先初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir my-react-comp-npm</span><br><span class="line">cd rmy-react-comp-npm</span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line">mkdir src</span><br><span class="line"></span><br><span class="line">mkdir touch .babelrc</span><br></pre></td></tr></table></figure><h3 id="2-安装webpack，babel等工具，配置文件"><a href="#2-安装webpack，babel等工具，配置文件" class="headerlink" title="2.安装webpack，babel等工具，配置文件"></a>2.安装webpack，babel等工具，配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -D  webpack webpack-cli</span><br><span class="line"></span><br><span class="line">npm install -D babel-loader @babel/core @babel/preset-env @babel/preset-react</span><br></pre></td></tr></table></figure><p>####配置</p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-react-comp-npm&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;build/index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;webpack --watch&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.3.4&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.3.4&quot;,</span><br><span class="line">    &quot;@babel/preset-react&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.0.5&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.29.6&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.2.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;react&quot;: &quot;^16.8.4&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^16.8.4&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：main: 组件的入口。开发者在 import 我们的组件的时候会引入这里 export 的内容</p><h4 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;@babel/preset-env&quot;,</span><br><span class="line">        &quot;@babel/preset-react&quot;</span><br><span class="line">    ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./src/index.js&apos;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &apos;build&apos;),</span><br><span class="line">        filename: &apos;index.js&apos;,</span><br><span class="line">        libraryTarget: &apos;commonjs2&apos; // THIS IS THE MOST IMPORTANT LINE! :mindblow: I wasted more than 2 days until realize this was the line most important in all this guide.</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js$/,</span><br><span class="line">                include: path.resolve(__dirname, &apos;src&apos;),</span><br><span class="line">                exclude: /(node_modules|bower_components|build)/,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: &apos;babel-loader&apos;,</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    externals: &#123;</span><br><span class="line">        &apos;react&apos;: &apos;commonjs react&apos; // this line is just to use the React dependency of our parent-testing-project instead of using our own React.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-编写组件"><a href="#3-编写组件" class="headerlink" title="3.编写组件"></a>3.编写组件</h3><h4 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import ReactComp from &quot;./ReactComp&quot;;</span><br><span class="line">export default ReactComp</span><br></pre></td></tr></table></figure><h4 id="src-ReactComp-js"><a href="#src-ReactComp-js" class="headerlink" title="src/ReactComp.js"></a>src/ReactComp.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line"></span><br><span class="line">class ReactComp extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button&gt;&#123;this.props.title&#125;&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactComp.propTypes = &#123;</span><br><span class="line">    title:PropTypes.string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ReactComp;</span><br></pre></td></tr></table></figure><h3 id="4-打包并测试"><a href="#4-打包并测试" class="headerlink" title="4.打包并测试"></a>4.打包并测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在my-react-comp-npm项目根目录下</span><br><span class="line"></span><br><span class="line">npm run build</span><br><span class="line">npm link</span><br></pre></td></tr></table></figure><p>npm link 把打包之后的组件引入到 global node_modules 中，然后在验证 demo 中再通过  引入这个组件，并验证是否符合预期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//test-project根目录下</span><br><span class="line">npm link my-react-comp-npm</span><br><span class="line"></span><br><span class="line">//test-project/src/test.js</span><br><span class="line">import MyReactCompNpm from my-react-comp-npm</span><br></pre></td></tr></table></figure><p>在test-project项目下测试 my-react-comp-npm组件的功能</p><h3 id="5-发布到npm"><a href="#5-发布到npm" class="headerlink" title="5.发布到npm"></a>5.发布到npm</h3><p>经测试后没问题的组件，进行npm发布</p><ol><li>注册npm账户</li><li>my-react-comp-npm组件根目录下运行 ：npm login</li><li>运行：npm publish</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建一个react组件并发布到npm，就是编写react，使用webpack编译，发布的过程&lt;/p&gt;
&lt;h3 id=&quot;1-创建一个组件&quot;&gt;&lt;a href=&quot;#1-创建一个组件&quot; class=&quot;headerlink&quot; title=&quot;1. 创建一个组件&quot;&gt;&lt;/a&gt;1. 创建一个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>setState 同步异步研究</title>
    <link href="http://yoursite.com/2018/09/18/state-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/09/18/state-同步异步研究/</id>
    <published>2018-09-18T07:44:19.000Z</published>
    <updated>2019-06-14T10:19:09.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>之前一直以为react中的setState方法是异步操作，直到遇到了这样一个场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">        this.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init = () =&gt; &#123;</span><br><span class="line">        getChannelConfig() //promise</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                channelList:res.data||[]</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            console.log(this.state.channelList)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现打印出来的channelList竟然是修改后的数据，也就是说setState同步了！</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>查了一圈，发现官网是这样解释的：</p><p>setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.</p><p>第一句说setState()不会马上更新状态（异步），而第二句又说可能会返回之前的值（同步），也就是可能异步，这就很矛盾了，于是又查了一圈，发现setState异步与否，与调用该方法的源有关系，受控于react的调用源，则异步（如组件的onClick），不受控与react的调用源，则同步</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h4><p>创建一个demo如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &apos;react&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line"></span><br><span class="line">class StateSyncAsync extends PureComponent &#123;</span><br><span class="line"></span><br><span class="line">    state=&#123;</span><br><span class="line">        count:0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;timer&apos;)</span><br><span class="line">            this.update()</span><br><span class="line">        &#125;, 3000);</span><br><span class="line"></span><br><span class="line">        console.log(&apos;mount&apos;)</span><br><span class="line">        this.update()        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update=()=&gt;&#123;</span><br><span class="line">        console.log(&apos;pre:&apos;,this.state.count)</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            count:this.state.count+1</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&apos;post:&apos;, this.state.count)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;() =&gt; &#123; </span><br><span class="line">                    console.log(&apos;click&apos;)</span><br><span class="line">                    this.update()&#125;</span><br><span class="line">                    &#125;&gt;update&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default StateSyncAsync;</span><br></pre></td></tr></table></figure><p>update方法用来修改state，并输出修改前后的state值用来检验是否异步</p><p>通过三个不同的源来调用update，分别是setTimeout方法（不受控react），componentDidMount中直接调用（受控），react组件中onClick绑定（受控）</p><p>结果如下:<br><img src="http://thyrsi.com/t6/372/1537258111x-1922735356.jpg" alt="￼"></p><p>可以看到对于受控的两组（mount，click）setState均为异步操作，<br>而不受控的timer，则为同步</p><h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><p>进一步的，考虑在promise中的情况，改动如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">               </span><br><span class="line">        console.log(&apos;mount&apos;)</span><br><span class="line">        new Promise((res,rej)=&gt;&#123;</span><br><span class="line">            this.update()</span><br><span class="line">            res()</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://thyrsi.com/t6/372/1537258363x-1922733609.jpg" alt=""></p><p>仍然是异步的，即仍然受控</p><h3 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h3><p>最后，我们将调用放在promise的then方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">               </span><br><span class="line">        console.log(&apos;mount&apos;)</span><br><span class="line">        new Promise((res,rej)=&gt;&#123;   </span><br><span class="line">            res()</span><br><span class="line">        &#125;).then(()=&gt;&#123;</span><br><span class="line">          this.update()</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="http://thyrsi.com/t6/372/1537258776x-1566663863.jpg" alt=""></p><p>发现setState同步了，也就是说在then中的调用已经不受react控制</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>上例中，不受控的调用源来自于event loop中的任务，所以考虑事件循环中的调用可以使setState同步</p><p>为确保万一，应该都用异步的方式来处理state，防止出现不必要的状态问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;之前一直以为react中的setState方法是异步操作，直到遇到了这样一个场景&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gitignore的配置及忽略无效问题</title>
    <link href="http://yoursite.com/2018/06/29/gitignore%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%BF%BD%E7%95%A5%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/29/gitignore的配置及忽略无效问题/</id>
    <published>2018-06-29T09:02:33.000Z</published>
    <updated>2018-06-29T10:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitignore-的配置"><a href="#gitignore-的配置" class="headerlink" title=".gitignore 的配置"></a>.gitignore 的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># ：注释符号</span><br><span class="line">build/         过滤整个build文件夹；</span><br><span class="line">*.class        过滤所有.class后缀的文件；</span><br><span class="line">path/to/file.txt    过滤具体文件</span><br><span class="line">path/*.txt          过滤path下的所有.txt文件</span><br><span class="line"></span><br><span class="line">！                  保留（不忽略）</span><br><span class="line">！build/ ：          添加整个文件夹（不过滤）；</span><br><span class="line">！*.class：          添加所有.class后缀的文件；</span><br><span class="line">！path/to/local.properties:  添加具体文件</span><br></pre></td></tr></table></figure><h3 id="忽略失效"><a href="#忽略失效" class="headerlink" title="忽略失效"></a>忽略失效</h3><p>.gitignore中增加了过滤规则但是不起作用的情况，多半是由于在创建.gitignore文件或<strong><em>添加一些过滤规则之前就track了相应的内容</em></strong>，<strong>也就是说如果Git已经开始管理这些文件，则无法再通过过滤规则过滤它们</strong>。 </p><p>解决方法就是先把本地这些文件变成未track状态，在缓存里删除它们，然后提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;update .gitignore&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;gitignore-的配置&quot;&gt;&lt;a href=&quot;#gitignore-的配置&quot; class=&quot;headerlink&quot; title=&quot;.gitignore 的配置&quot;&gt;&lt;/a&gt;.gitignore 的配置&lt;/h3&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native 学习（一）</title>
    <link href="http://yoursite.com/2018/06/11/React-Native-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/06/11/React-Native-学习（一）/</id>
    <published>2018-06-11T08:53:21.000Z</published>
    <updated>2018-06-11T15:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-React-Navigation-的安装"><a href="#1-React-Navigation-的安装" class="headerlink" title="1.React Navigation 的安装"></a>1.React Navigation 的安装</h3><p>React Navigation 是 React Native 导航解决方案，通过以下命令进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-navigation</span><br><span class="line"># or with npm</span><br><span class="line"># npm install --save react-navigation</span><br></pre></td></tr></table></figure><h3 id="2-stack-navigation"><a href="#2-stack-navigation" class="headerlink" title="2.stack navigation"></a>2.stack navigation</h3><p>stack navigation 提供了路由的堆栈管理，记录导航历史</p><h4 id="stack-navigator的创建"><a href="#stack-navigator的创建" class="headerlink" title="stack navigator的创建"></a>stack navigator的创建</h4><p>使用createStackNavigator创建一个stack navigator，createStackNavigator返回一个React 组件（包含路由配置对象和option对象）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const RootStack = createStackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Home: &#123;</span><br><span class="line">      screen: HomeScreen//react组件，必须属性</span><br><span class="line">    &#125;,</span><br><span class="line">    Detail: &#123;</span><br><span class="line">      screen: DetailScreen</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    initialRouteName:&apos;Home&apos;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">export default class App extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;RootStack /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-navigation-prop"><a href="#3-navigation-prop" class="headerlink" title="3.navigation prop"></a>3.navigation prop</h3><p>在栈顶端的路由会自动注入一个navigation的属性，navigation有如下方法：</p><p>####(1) navigate(路由名称，参数)<br>navigate用于跳转到目的路由组件，会先在栈内查找目标组件，如果没有，在栈顶新增，如果有，直接跳到目标组件，并删除目标组件之后的所有组件（路由对应的组件被注销）</p><p>在页面中navigate本页面时，无变化（当前组件不注销）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.props.navigation.navigate(&apos;Detail&apos;)</span><br></pre></td></tr></table></figure><p>####(2) push(路由名称，参数)<br>始终在栈顶新增一个路由组件（允许重复）</p><p>####(3) goBack()<br>路由栈pop（删除当前组件，回到栈中的上一个组件）</p><h3 id="4-setParams-参数对象"><a href="#4-setParams-参数对象" class="headerlink" title="(4) setParams(参数对象)"></a>(4) setParams(参数对象)</h3><p>设置组件自身param</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.props.navigation.setParams(&#123;name: &apos;123&apos;&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-navigate-传参"><a href="#4-navigate-传参" class="headerlink" title="4.navigate 传参"></a>4.navigate 传参</h3><p>传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//home 组件</span><br><span class="line"></span><br><span class="line">this.props.navigation.navigate(&apos;Home&apos;,&#123;</span><br><span class="line">name:&apos;123&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//home 组件</span><br><span class="line"></span><br><span class="line">this.props.navigation.getParam(&apos;Home&apos;,&apos;默认值&apos;),</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line">this.props.navigation.state.params</span><br></pre></td></tr></table></figure><h3 id="5-navigationOptions"><a href="#5-navigationOptions" class="headerlink" title="5.navigationOptions"></a>5.navigationOptions</h3><p>createStackNavigator的第二个参数即为navigationOptions，是一个全局的配置对象</p><p>每个组件中可以接受一个navigationOptions作为静态属性，其配置可以覆盖全局的navigationOptions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//全局配置对象</span><br><span class="line">onst RootStack = createStackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Home: &#123;</span><br><span class="line">      screen: HomeScreen//必须属性</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,//路由配置对象</span><br><span class="line">  </span><br><span class="line">  &#123;</span><br><span class="line">    initialRouteName:&apos;Home&apos;,</span><br><span class="line">    navigationOptions:&#123;</span><br><span class="line">      headerStyle: &#123;</span><br><span class="line">        backgroundColor: &apos;#f4511e&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">      headerTintColor: &apos;#fff&apos;,</span><br><span class="line">      headerTitleStyle: &#123;</span><br><span class="line">        fontWeight: &apos;bold&apos;,</span><br><span class="line">        fontSize: 20</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;//option对象</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//Home组件的配置对象</span><br><span class="line">class HomeScreen extends Component &#123;</span><br><span class="line">  static navigationOptions=&#123;</span><br><span class="line">    headerTitle:&lt;MyHeader/&gt;,</span><br><span class="line">    headerRight:(</span><br><span class="line">    &lt;Button</span><br><span class="line">      onPress=&#123;()=&gt;&#123;console.warn(&apos;pressed&apos;)&#125;&#125;</span><br><span class="line">      title=&apos;info&apos;</span><br><span class="line">      color=&apos;#fff&apos;</span><br><span class="line">    /&gt;)</span><br><span class="line">  &#125;//该配置对象优先级高于全局配置</span><br><span class="line">  </span><br><span class="line">  render()&#123;</span><br><span class="line">  return()</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>组件内部的navigationOptions可以使对象或者返回配置对象的函数，如果势函数，接受以下参数：</p><p> navigation - 页面的 导航属性 ，在页面中的路由为navigation.state</p><p> screenProps - 从导航器组件上层传递的 props</p><p> navigationOptions - 如果未提供新值，将使用的默认或上一个选项(全局配置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static navigationOptions = (&#123; navigation,screenProps,navigationOptions &#125;) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: navigation.getParam(&apos;otherParam&apos;, &apos;A Nested Details Screen&apos;),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p><strong>注：在navigationOptions中，this不指向组件实例（HomeScreen）,所以不能用setState等方法</strong><br>解决方案：通过param传递处理函数或者使用redux等管理数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class HomeScreen extends React.Component &#123;</span><br><span class="line">  static navigationOptions = (&#123; navigation &#125;) =&gt; &#123;</span><br><span class="line">    const params = navigation.state.params || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      headerTitle: &lt;LogoTitle /&gt;,</span><br><span class="line">      headerRight: (</span><br><span class="line">        &lt;Button onPress=&#123;params.increaseCount&#125; title=&quot;+1&quot; color=&quot;#fff&quot; /&gt;</span><br><span class="line">      ),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    this.props.navigation.setParams(&#123; increaseCount: this._increaseCount &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    count: 0,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  _increaseCount = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; count: this.state.count + 1 &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  /* later in the render function we display the count */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-React-Navigation-的安装&quot;&gt;&lt;a href=&quot;#1-React-Navigation-的安装&quot; class=&quot;headerlink&quot; title=&quot;1.React Navigation 的安装&quot;&gt;&lt;/a&gt;1.React Navigation 的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/11/hello-world/"/>
    <id>http://yoursite.com/2018/06/11/hello-world/</id>
    <published>2018-06-11T08:20:21.000Z</published>
    <updated>2018-06-11T08:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
